#ifndef __C__TEXTUREFONT__HPP__INCLUDED__#define __C__TEXTUREFONT__HPP__INCLUDED__//By brick , based on irr gui font loader#include "engineString.h"#include "IVideoDriver.h"#include "engineArray.h"namespace engine{	namespace ExtModules	{		using namespace video;		using namespace gui;		class	CTextureFont		{			private:	//variables				video::IVideoDriver* m_ActiveDriver;				core::array< core::rect<s32> > m_PositionData;				video::ITexture* m_TextureRef;				s32 			 m_WrongChar;				u32				 m_RenderTimer;							private:	//helper funcs				inline const s32 getWidthFromCharacter(const wchar_t c);				const bool loadTexture(video::ITexture* texture);				const bool loadTexture(io::IReadFile* file);								void readPositions16bit(video::ITexture* texture, 										s32& lowerRightPos);														void readPositions32bit(video::ITexture* texture, 										s32& lowerRightPos);														const s32 getCharacterFromPos(const wchar_t* text, 											  const s32 pixel_x);							public:			    CTextureFont();				CTextureFont(video::IVideoDriver* driver);				~CTextureFont();								void unload();				void setDriver(video::IVideoDriver* driver);				const bool load(const c8* filename);				const bool load(io::IReadFile* file);								void renderOptimized(const wchar_t* text,									 const core::position2d<s32>& pos,									 const video::SColor& color,									 const u32 deltaTime = 0,									 const bool frameIdp = false);									 				void render(const wchar_t* text, 							const core::position2d<s32>& pos,							const video::SColor& color,							const bool hcenter=false,							const bool vcenter=false, 							const core::rect<s32>* clip=0);											void render(const wchar_t* text, 							const core::rect<s32>& position,							const video::SColor& color,							const bool hcenter=false,							const bool vcenter=false, 							const core::rect<s32>* clip=0);											core::dimension2d<s32> getDimension(const wchar_t* text);				const s32  getHeight() const;						};			};//ext mods};//engine#endif